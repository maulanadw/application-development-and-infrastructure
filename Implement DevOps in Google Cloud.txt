Open cloud shell

> Copy and replace to cloud shell
gcloud config set compute/zone us-east1-b

git clone https://source.developers.google.com/p/$DEVSHELL_PROJECT_ID/r/sample-app

gcloud container clusters get-credentials jenkins-cd

kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user=$(gcloud config get-value account)

export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/component=jenkins-master" -l "app.kubernetes.io/instance=cd" -o jsonpath="{.items[0].metadata.name}")

kubectl port-forward $POD_NAME 8080:8080 >> /dev/null &

printf $(kubectl get secret cd-jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo


Copy the result/ password.


Web preview on port 8080

Welcome to Jenkins!
Username : admin
Password : [REPLACE-THE-PASSWORD]

> Copy and relpace to cloud shell
cd sample-app

kubectl create ns production

kubectl apply -f k8s/production -n production

kubectl apply -f k8s/canary -n production

kubectl apply -f k8s/services -n production

kubectl get svc

kubectl get service gceme-frontend -n production

git init

git config credential.helper gcloud.sh

git remote add origin https://source.developers.google.com/p/$DEVSHELL_PROJECT_ID/r/sample-app

git config --global user.email "[EMAIL_ADDRESS]"

git config --global user.name "[USERNAME]"

git push origin master


Jenkins - Manage Jenkins

Manage Credentials - Jenkins

Global credentials (unrestricted) - Add Credentials

Kind : Google Service Account from metadata - OK

Jenkins - New Item

Choose : Multibranch Pipeline - OK

> Branch Sources - Add source [Git]
Project Repository : https://source.developers.google.com/p/[PROJECT_ID]/r/sample-app
Credentials : [choose credentials when you write before]

Scan Multibranch Pipeline Triggers - checklist 'Periodically if not otherwise run' - Interval : 1 minute

Save.


Go to Jenkins - sample-app

Click master


> Copy and replace to cloud shell
git checkout -b new-feature

*Change the two instances of <div class="card blue"> to <div class="card orange"*
*Press i to insert*
vi html.go

ESC - :wq

*Find and change version  -> const version string = "2.0.0"
vi main.go

ESC - :wq

> Copy and replace to cloud shell
git add Jenkinsfile html.go main.go

git commit -m "Version 2.0.0"

git push origin new-feature

kubectl proxy &


Back to Jenkins - sample-app - master - Status - See 'Stage View'


> Copy and replace to cloud shell
curl \
http://localhost:8001/api/v1/namespaces/new-feature/services/gceme-frontend:80/proxy/version

kubectl get service gceme-frontend -n production

Copy EXTERNAL-IP

New tab and replace. [See version]


> Copy and replace to cloud shell
git checkout -b canary

git push origin canary

export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)

while true; do curl http://$FRONTEND_SERVICE_IP/version; sleep 1; done

[Output : 1.0.0]

CTRL+C

> Copy and replace to cloud shell
git checkout master

git merge canary

git push origin master


Go to Jenkins - sample-app - canary


> Copy and replace to cloud shell
export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)

while true; do curl http://$FRONTEND_SERVICE_IP/version; sleep 1; done

CTRL+C

kubectl get service gceme-frontend -n production

Copy EXTERNAL-IP

New tab and replace

Check my progress.